jwt:
  token: ${JWT_TOKEN:ac7b9c76236ae1e80f181586a980d292a1a6eb14e3beeaa97d01523ef2a571b1}

spring:
  datasource:
    username: ${DB_USER:postgres}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_SCHEMA:rnt_social}
    password: ${DB_PASS:12345678}
    driver-class-name: org.postgresql.Driver
  hikari:
    maximum-pool-size: 20
    minimum-idle: 5
    idle-timeout: 30000
    max-lifetime: 1800000
    connection-timeout: 20000
    leak-detection-threshold: 2000
  messages:
    basename: messages
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always  # Set to "never" if the schema is already initialized
    #    overwrite-existing-jobs: true
    properties:
      org:
        quartz:
          jobStore:
            #            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
    auto-startup: true

  data:
    redis:
      url: redis://:${REDIS_PASSWORD:12345678}@${REDIS_HOST:localhost}:${REDIS_PORT:6379}/0
      timeout: 6000

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'false'

  application:
    name: RNT_Social_Api

  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100
    scheduling:
      pool:
        size: 10
logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    root: DEBUG

server:
  forward-headers-strategy: native
  error:
    include-message: always
  port: ${APP_PORT:8080}
  compression:
    enabled: true
    min-response-size: 1024
    mime-types: text/html, text/xml, text/plain, text/css, application/json, application/javascript
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

s3:
  liara:
    endpoint: https://storage.c2.liara.space
    access: ablomnn1lsfsrv93
    secret: 1a063f15-f94e-4848-ae1b-3719a32d1af7
#    endpoint: http://localhost:9000
#    access: minioadmin
#    secret: minioadmin

security:
  init:
    enabled: false
  jwt:
    exp: 86400000

document:
  jwt:
    exp: 3600000

#    this config for custom executor service made in core
config:
  executor:
    size: 10

image-processor:
  ratio: 0.6
  scale: 1.0

generator:
  enabled: false
  xmlFolderPath: generate-xmls
  basePackage: ir.rayanovinmt.rnt_social_api

garbage:
  collector:
    document:
      time: 86400000
    log:
      time: 86400000
      expire: 30

app:
  cors:
#    allowed-origins: http://localhost:3000,http://192.168.2.213:3000
     allowed-origins: "*"


springdoc:
  swagger-ui:
    enabled: ${SWAGGER_UI_ENABLED:true}
  api-docs:
    path: /v3/api-docs
  title: RNT Social Api
  description: RNT Social Api
  version: 1.0.0

